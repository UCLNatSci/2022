Traceback (most recent call last):
  File "c:\users\natsciteaching\appdata\local\programs\python\python37\lib\site-packages\jupyter_cache\executors\utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "c:\users\natsciteaching\appdata\local\programs\python\python37\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "c:\users\natsciteaching\appdata\local\programs\python\python37\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "c:\users\natsciteaching\appdata\local\programs\python\python37\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "c:\users\natsciteaching\appdata\local\programs\python\python37\lib\asyncio\base_events.py", line 587, in run_until_complete
    return future.result()
  File "c:\users\natsciteaching\appdata\local\programs\python\python37\lib\site-packages\nbclient\client.py", line 664, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "c:\users\natsciteaching\appdata\local\programs\python\python37\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "c:\users\natsciteaching\appdata\local\programs\python\python37\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt

def count_neighbours(grid, i, j):
    pass
    # Return the number of live neighbours
    # of the cell at position i, j

def advance(grid):
    n, m = grid.shape
    new_grid = np.zeros((n,m))
    
    # Loop over each of the cells in the grid.
    # For each cell, determine the number of live neighbours.
    # Use the game of life rules to determine if the cell lives or dies.
    # Finally, set the value of the equivalent cell in new_grid

    return new_grid

n = 5
grid1 = np.zeros((n, n))

# set the initial value of grid1

print("grid1:")
print(grid1)

grid2 = advance(grid1)

print("grid2:")
print(grid2)


------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[1;32m~\AppData\Local\Temp\ipykernel_22696\1362373904.py[0m in [0;36m<module>[1;34m[0m
[1;32m----> 1[1;33m [1;32mimport[0m [0mnumpy[0m [1;32mas[0m [0mnp[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m      2[0m [1;32mimport[0m [0mmatplotlib[0m[1;33m.[0m[0mpyplot[0m [1;32mas[0m [0mplt[0m[1;33m[0m[1;33m[0m[0m
[0;32m      3[0m [1;33m[0m[0m
[0;32m      4[0m [1;32mdef[0m [0mcount_neighbours[0m[1;33m([0m[0mgrid[0m[1;33m,[0m [0mi[0m[1;33m,[0m [0mj[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m      5[0m     [1;32mpass[0m[1;33m[0m[1;33m[0m[0m

[1;31mModuleNotFoundError[0m: No module named 'numpy'
ModuleNotFoundError: No module named 'numpy'

